<p>Quality properties, such as performance or reliability, are crucial for the success of a software system and largely influenced by the software architecture. Their quantitative prediction supports systematic, goal-oriented software design and forms a base of an engineering approach to software design. Researchers have proposed numerous approaches to predict a quality property based on a software architecture models. Using such prediction techniques can lead to better design decisions than experience.</p>
 
<p>Still, it is hard to design architectures that exhibit a good trade-off between multiple, often conflicting quality properties and costs. Even with a given functional design, many degrees of freedom in the software architecture (e.g.\ component deployment or server configuration) span a large design space. At the same time, the relation between a design decision and its effects on the quality properties can be complex and can depend on other design decisions. Thus, manually exploring the design space and finding architectures with good trade-offs is laborious.</p>
 
<p>To provide support for this task, the goal of an automated method should be to find optimal trade-off candidate architectures software architects and stakeholders can analyse and use for well-informed decisions, knowing the effects and incurred trade-offs of their choices.</p>
 
<p>A number of  existing approaches addresses the challenge of improving software architecture by automatically suggesting improvements. For example, rule-based approaches that only target performance improvement have been suggested. While they codify useful knowledge from the performance prediction domain, they ignore the possible trade-off with other quality attributes. Additionally, frameworks to address multi-criteria optimization of software architectures  considering several degrees of freedom have been proposed. However, their support of different degrees of freedoms or of expressive quality prediction techniques is limited, thereby severely limiting the class of analysable systems.</p>
 
<p>This thesis proposes a method and tool to improve component-based software architectures (CBA) by searching the design space using metaheuristics. The method relies on existing performance and reliability prediction methods to evaluate candidate architectures. It supports software architects in making trade-off decisions and negotiating quality requirements with a system's stakeholders. The main contributions are the following:</p>
<ul> 
<li>First, we identify the information needs of software architects and stakeholders that can be filled with an automated method based on model-based quality prediction. Based on this, we extend a process model for the development of new component-based systems with our method and include a more solid process for determining appropriate quality requirements. The method provides  quantitative feedback from model-based quality predictions for software architects, requirements engineers, and stakeholders to be used in architecture design and requirements analysis. Furthermore, we embed the method in other scenarios such as software evolution scenarios or capacity planning.</li>
 
<li>Second, we provide a framework for multi-objective optimization of software architectures based on quality predictions. This framework is independent of the used CBA metamodel and quality analysed due to its flexible and extensible degree of freedom model. Additionally, it allows to include domain-specific knowledge in form of architectural tactics operators known from literature and operationalized in this work.</li>
 
<li>Third, to instantiate this framework, we provide \emph{concrete degrees of freedom for CBA} affecting performance, reliability, and costs as well as performance and costs tactics for the Palladio Component Model, which allows state-of-the-art quality predictions.</li>
</ul>
 
<p>The method proposed in this thesis helps software architects (1) by saving significant costs for manually exploring the potentially large design space, (2) by providing a more solid process for determining appropriate quality requirements, thus providing input for well-informed trade-off decisions in the requirements analysis phase, and (3) by providing an extensible analysis framework applicable in a large class of practical scenarios. In addition to development of new systems, the method can be used in software evolution scenarios (such as adding new functionality or change the software to adapt to changing usage or to a new environment).</p>

<p>We have validated the accuracy and applicability of our method and evaluated the performance of our extensions of the optimization step (e.g. using tactics). This thesis describes experiments with the novel method on two complex component-based software systems, the first being a business reporting system (BRS); and the second being an industrial control system (ICS) from ABB, which consists of more than 25 components deployed on up to 8 servers and is implemented in several million lines of code. 
We found that the explored design space indeed provided potential for improvement and required to make trade-off decisions. Furthermore, our tool was able to closely approximate the globally optimal candidates. Additional, our extension of standard evolutionary algorithms with tactics was able to find solutions 50% to 90% faster on average.</p>
