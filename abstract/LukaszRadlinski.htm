<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
Empirical software engineering models typically focus on predicting
development effort or software quality but not both. Using Bayesian
Nets (BNs) as causal models, researchers have recently attempted to
build models that incorporate relationships between functionality,
effort, software quality, and various process variables. This thesis
analyses such models and, as part of a new validation study,
identifies their strengths and weaknesses. A major weakness is their
inability to incorporate prior local productivity and quality data,
which limits their applicability in real software projects. The main
hypothesis is that it is possible to build BN models that overcome
these limitations without compromising their basic philosophy. In
particular, the thesis shows we can build BNs that capture known
trade-offs and can be tailored to individual company needs.  The new
model, called the Productivity Model, is developed by using the
results of the new validation of the existing model, together with
various other analyses. These include: the results of applying various
statistical methods to identify relationships between a range of
variables using publicly available data on software projects; analyses
of other studies; expert knowledge. The new model is also calibrated
using the results of an extensive questionnaire survey of experts in
the area.  The thesis also makes a number of other novel contributions
to improved risk assessment using BNs, including:
<ul>
<li>A model which predicts the proportions of different types of
defects likely to be left in software after testing. The model uses
the results of statistical analysis on the past software projects. It
can be combined with other defect prediction models to predict the
number of residual defects of different categories.
<li>A learning model for predicting the number of defects found and
fixed in successive testing iterations.
</ul>
</div>
</body>
</html>
