<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">A Software Classification Scheme
ABSTRACT

By Rubén Prieto-Díaz
University of California, Irvine, 1985

Reusing code is one approach to software reusability.  Code is the end product of the software lifecycle.  It is delivered in a low level representation that it difficult to reuse unless an almost perfect match exists between available features and required specifications.  There is a need to organize large inventories of software such that reusable code is easy to locate and exchange.  The relative success in the reuse of code fragments reported by some software factories is due in part to their capacity to encapsulate domain specific functions and create specialized libraries of components classified by these local standardized functions.
<P>

A general software classification scheme that organizes reusability related attributes and common functions from different domains is proposed as a partial solution to the software reusability problem.  For the problem of selecting from similar, potentially reusable components, a partial solution based on evaluation of common characteristics is also proposed.  A library system is presented that integrates the proposed classification scheme with an evaluation mechanism based on inherent component attributes, programming languages characteristics and reuser experience.
<P>

The fundamental contribution of this dissertation is a formal treatment of a faceted scheme for software classification leading to better understanding of reusability at the code level. This approach has been prototyped in a library system for the semi-automatic classification of software components. Analyses were performed to evaluate the classification scheme. The results show the potential of the scheme in organizing collections of code fragments, in improving retrieval, and in simplifying the classification process. Tests of the evaluation mechanism showed positive correlation with evaluations conducted by potential reusers. 




</div>
</body>
</html>