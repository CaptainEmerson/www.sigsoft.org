<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
With the size and complexity of software systems growing at a very fast pace, one of the concerns that we have to address is that of tractable reasoning. We need to make sure that the software we build does not exceed the limits of our understanding. Since we only know how to reason about software of limited sizes, we need to find a way of always keeping the logical size of the programs we write small. Software should thus be built from small, well-understood components put together in predictable ways. 
<p>
Parameterization is a technique that can greatly help in building scalable, flexible, and robust software systems. An important consideration with parameterized components is the time of binding parameters to the component; whether a commitment to parameters can be changed or not depends on the binding time. In order to achieve maximum flexibility, parameters should be bound as late as possible. Postponing parameter binding to execution time allows for the selection of parameters to be most effective, because it is at run time that details of a system are most complete. Further, dynamically bound parameterized components also present the possibility for dynamic reconfiguration. 
<p>
In this dissertation, we present a methodology for building dynamically reconfigurable parameterized components. The methodology is presented as a design pattern, with minimal assumptions on the target programming language or environment. The Service Facility design pattern offers a model of parameterized components that supports dynamic binding of parameters. Further, the model supports a mode of dynamic reconfiguration called dynamic module replacement, which involves re-binding of some or all of the parameters to a parameterized component during run time. The model also includes safety conditions to ensure that the dynamic parameter bindings (and re-bindings) are correct with respect to type-safety. 
<p>
The techniques and ideas presented in this dissertation are in the context of wellknown and widely-used technologies (such as Java, .NET, and XML) so as to enable these ideas to be inducted into practice quickly. The solutions presented here are generic and incrementally deployable. 
</div>
</body>
</html>
