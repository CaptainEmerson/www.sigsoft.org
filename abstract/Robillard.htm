<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">Many program evolution tasks involve source code that is not modularized as a single unit.
<P>
Furthermore, the source code relevant to a change task often implements different concerns, or
high-level concepts that a developer must consider. Finding and understanding concerns scattered
in source code is a difficult task that accounts for a large proportion of the effort of performing
program evolution. One possibility to mitigate this problem is to produce textual documentation
that describes scattered concerns. However, this approach is impractical because it is costly, and
because, as a program evolves, the documentation becomes inconsistent with the source code.
<P>
The thesis of this dissertation is that a description of concerns, representing program structures
and linked to source code, that can be produced cost-effectively during program investigation activities,
can help developers perform software evolution tasks more systematically, and on different
versions of a system.
<P>
To validate the claims of this thesis, we have developed a model for a structure, called concern
graph, that describes concerns in source code in terms of relations between program elements.
<P>
The model also defines precisely the notion of inconsistency between a concern graph and the
corresponding source code, so that it is possible to automatically detect and repair inconsistencies
between a description of source code and an actual code base.
<P>
To experiment with concern graphs, we have developed a tool, called FEAT, that allows developers
to iteratively build concern graphs when investigating source code, to view the code related
to a concern, and to perform analyses on a concern representation. Using FEAT, we have evaluated
the cost and usefulness of concern graphs in a series of case studies involving the evolution
of five systems of different size and style. The results show that concern graphs are inexpensive
to create during program investigation, can help developers perform program evolution tasks more
systematically, and are robust enough to represent concerns in different versions of a system.
<P>



</div>
</body>
</html>