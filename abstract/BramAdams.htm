<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
Software is omnipresent in our daily lives. As users demand ever more advanced features, software systems have to keep on evolving. In practice, this means that software developers continuously need to adapt the description of a software application. However, such a description not only consists of source code expressed in some programming language. A considerable amount of knowledge is hidden in lesser known software development artifacts, like the build system. As its name suggests, the build system is responsible for building an executable program, ready for use. It does this by coordinating compilers and other tools which translate program text into machine-readable code. Hence, the build system plays a vital role in bringing software to life.
<p>
There are various indications that the evolution of source code is strongly related to that of the build system, and vice versa. When the source code changes, the build system has to co-evolve to safeguard the ability to build an executable program. A rigid build system on the other hand limits software developers in the changes they make to a program. This co-evolution relation especially surfaces when drastic changes in the source code are coupled with an inflexible build system, as is the case when AOSD technology is introduced in a legacy system. AOSD is a young software development approach which enables developers to structure and compose source code in a better way. Legacy systems are old software systems which are still mission-critical, but of which the source code and the build system make use of old(-fashioned) technology and are no longer fully understood. As the re-engineering of legacy systems is considered to be a "killer application" of AOSD, the co-evolution of source code and the build system is an important phenomenon to take into account.
<p>
My PhD dissertation focuses on finding a conceptual explanation for the co-evolution of source code and the build system, and on finding developer support to grasp and manage this phenomenon. We postulate six "roots of co-evolution" which represent six different ways in which source code and the build system interact with each other. Based on these roots, we have developed tool and aspect language support to understand and manage co-evolution. The roots and the tool support have been validated in case studies, both in the context of co-evolution in general and in the context of the introduction of AOSD technology in legacy systems. The dissertation experimentally shows that co-evolution is a real problem, but that specific software development and aspect language support enables developers to deal with it.
</div>
</body>
</html>
