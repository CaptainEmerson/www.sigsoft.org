<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">Unanticipated changes to complex software systems can introduce anomalies such as duplicated code, 
suboptimal inheritance relationships and a proliferation of run-time downcasts. Refactoring to elimi- 
nate these anomalies may not be an option, at least in certain stages of software evolution. 
A class extension is a method that is defined in a module, but whose class is defined elsewhere. Class 
extensions offer a convenient way to incrementally modify existing classes when subclassing is inap- 
propriate. Unfortunately existing approaches suffer from various limitations. Either class extensions 
have a global impact, with possibly negative effects for unexpected clients, or they have a purely local 
impact, with negative results for collaborating clients. Furthermore, conflicting class extensions are 
either disallowed, or resolved by linearization, with subsequent negative effects. 
To solve these problems we present classboxes, a module system for object-oriented languages that 
provides for behavior refinement (i.e. method addition and replacement). Moreover, the changes made 
by a classbox are only visible to that classbox (or classboxes that import it), a feature we call local 
rebinding. 
We present an experimental validation in which we apply the classbox model to both dynamically 
and statically typed programming languages. We used classboxes to refactor part of the Java Swing 
library, and we show two extensions built on top of classboxes which are (i) runtime adaptation with 
dynamically classboxes and (ii) expressing crosscutting changes. 




</div>
</body>
</html>