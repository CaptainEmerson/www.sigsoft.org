<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
The design of concurrent systems is a complex task prone to subtle errors that can have serious consequences. Behaviour modelling has proved to be successful in helping uncover flaws at design time; however, it has not had a widespread impact on practitioners. There are two important reasons for this. Firstly, behaviour model construction remains a difficult task that requires considerable expertise. Secondly, the benefits of behaviour analysis appear at the end of the model construction effort. In contrast, scenario-based specifications are relatively easy to use, have a wide acceptance in industry and are well suited for developing first approximations of intended behaviour; however, they are still maturing with respect to rigorous semantics and analysis tools. The main aim of this thesis is to develop a practical and effective process for elaborating system behaviour models and scenario-based specifications by exploiting the potential benefits of both while ameliorating t!
heir shortcomings.
<p>
This thesis proposes an approach for incremental elaboration centred on the notion of implied scenarios. Implied scenarios identify gaps in scenario-based specifications. These gaps are the result of mismatches between the behavioural and architectural aspects of specifications such as message sequence charts (MSCs). Due to the partial nature of scenario-based specifications, implied scenarios cannot be determined a priori to be undesired behaviour. Thus, by iteratively validating implied scenarios we can drive the elaboration of system models. Four artefacts are the outcome of the incremental elaboration process we propose. The first is a scenario-based specification that has been evolved from its original form to cover important aspects of the concurrent nature of the system that were under-specified or absent in the original specification.
In addition, the specification may have new, elicited functionality that was not present in previous versions. The second is a behaviour model that captures the component structure of the system. The third and fourth artefacts are behaviour models that serve as a system constraint and property respectively. These three behaviour models provide the basis for modelling and reasoning about system design. 
<p>
In addition to the process itself, the thesis has a number of more specific contributions. Firstly, we introduce the notion of implied scenario as indicators of gaps in scenario-based specifications. Secondly, we define a synthesis algorithm for constructing minimal architecture models. Thirdly, we provide an implied scenario detection method for regular MSC specifications that consists of bMSCs, hMSCs, and negative scenarios. Fourthly, we propose a
negative scenario language for documenting rejected implied scenarios. Finally, we have developed an extension of the Labelled Transition System Analyser tool that supports the elaboration process.
</div>
</body>
</html>
