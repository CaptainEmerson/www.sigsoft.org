<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">The adoption of model-based development techniques for the design of embedded software has had a major impact on today's industry. In this context, the model-based code generation approach plays a key role. Model-based code generation promises significant efficiency improvement in contrast to manual programming, provided that no errors are introduced by the tool. In many cases, optimisations are the main sources of error. Currently, there is a lack of methods that allow a comprehensive and largely automated test of the optimisations. The test approach proposed in this thesis closes this gap. The test approach provides and integrates solutions for four major challenges in code generator testing, particularly with regard to testing code generator optimisations: 
1.) A procedure for identifying code generator test cases, i.e. test models, which are highly likely to reveal code generator implementation bugs. 
  
2.) A method for generationg test data that can be used to compare the test models and the code generated from them for functional equivalence. 
  
3.) A test result evaluation method that can be used to check the test results, concerning the required test data, for validity with respect to the dynamic properties of model simulation and code execution. 
  
4.) A test environment that makes it possible to connect the different testing tools as well as to manage, control, and document the testing process. The experimental setting of the test environment should be selected in such a way that possible sources of error in the tool-chain can be revealed. 

The test approach presented provides possible solutions for these problems. More specifically, test case design is based on a partial specification of the optimisations in terms of graph transformation rules. This has the advantage that the model translation process, which in principle depends on the transformation of graphs, is specified in an abstract and formal way. Furthermore, implementation details are also taken into account for testing, which constitutes a good basis for test case, or, to be more precise, test model design. Most of the test models are generated by a model generator, developed specifically for this purpose. The required test data are extracted by means of the structural test. The test data allows sufficient coverage of functional properties on model level as well as on code level. Test result evaluation is carried out using signal comparison methods. In this context, the dynamic behaviour of model simulation and code execution are taken into considera!
tion. The test approach is realised by means of a modular test suite as a central part of an automated test environment. This thesis shows, if the test suite passes successfully, this indicates the adequate safeguarding of the code generator optimisations.
<P>




</div>
</body>
</html>