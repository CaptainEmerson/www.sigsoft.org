<p>Software is soft because it is easier to change than the hardware on which it executes. The relative ease of modification has led to the construction of increasingly complex and sophisticated programs based on existing systems. In the past, this evolutionary process often took place in an ad hoc fashion that usually resulted in:</p>
<ol>
 <li>distorting system structure,</li>
 <li>loosing traceability to the original design, and</li>
 <li>introducing intractable errors.</li>
</ol> 
<p>The goal of this dissertation is to present a mechanism for specifying and applying transformations on existing software systems, modules or components in such a manner that the overall system structure is preserved and control is maintained over the traceability and accountability of change. To meet this goal, a Module Composition Language (MCL) LILEANNA (LIL (Library Interconnect Language) Extended with Anna (Annotated Ada)) has been designed and implemented. This dissertation describes the language, the semantics of the software component modularization, parameterization and composition constructs, and the language's applicability to the software development process.</p>
