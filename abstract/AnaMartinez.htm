<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
There are many people, such as users (often of several types), management and software developers, involved with the development of a large software system, both in its design and use, being each person a potential source of knowledge. This way the need to describe complex software systems from different perspectives may result in the construction of many partial system models. These models may be constructed independently by different designers, may advocate specific modeling angles and may reflect disparate perceptions of these designers. As a result, the different perspectives of those involved in the process intersect, giving rise to conflicts. Although inconsistencies will have to be settled eventually, they may need to be tolerated temporarily to give designers a chance to work independently developing their own parts of a model without the need for continual reconciliation. In fact, tolerating inconsistency has been advocated by several researchers. Some approaches have also identified the need to enable reasoning in the presence of inconsistency.
<p>
An effective way to specify individual concerns is via viewpoint-based approaches. Reasoning from different viewpoints is a necessary part of most design processes. This task often involves collecting information from a number of potentially conflicting perspectives or sources, or participants with different views, and forming a single combined view or perspective (a synthesis, or consensus). However, an open problem in the viewpoints work is how to reason with combined information from multiple views without first resolving inconsistencies and incompleteness. There are approaches which require that the models to be combined are complete. However, as several parallel specifications evolve, they will frequently conflict with each other, and at all times they will be (to some degree) incomplete. Participants will need to manipulate each specification as it evolves, as part of the exploratory process, and we think it is important to be able to do it early in the software development life-cycle, when requirements may not be fully understood or described yet. This shows up the need to have mechanisms for merging models even if they are incomplete or inconsistent. As an overall requirement, each individual model, as well as the composed model, should be amenable to analysis and testing.
<p>
With this motivation, we have devised a methodology, referred to as MultiSpec (Multi-Perspective Methodology for Software Requirements Specifications), aiming at supporting the evolution of software requirements specifications gathered from multiple perspectives, formalizing the reasoning in presence of conflicts (overspecification) and incompleteness (underspecification) making use of an underlying many-valued logic. To get there, we have identified several challenges which have been addressed by MultiSpec:
<p>
1. An essential piece of the methodology is the merging process. Our main aim consists in getting, at intermediate stages of the development process, a merged view which properly reflects the knowledge of each participant in the elicitation tasks. MultiSpec provides four different merging operators depending on the goal of merging. Apart from our own comparison of the proposed operators, we provide a complete evaluation of them using a list of desired algebraic and semantic properties which should be held by an ideal merging operator. These properties can help us to compare the operators, revealing the key features of each, and identifying weaknesses that may require further research.
<p>
2. Another of these challenges, as expected, is the ability to evaluate and quantify the significance of a detected inconsistency. It is important to be able to diagnose the significance of an inconsistency in order to decide when and with what degree of priority it has to be settled. We show in this thesis to what extent incompleteness and disagreement are closely interrelated and play a central role to obtain a measure of the significance of a detected inconsistency. Moreover, we have realized that we also need to measure the total inconsistency of the merged view as the specification evolves, to check, for example, how the degree of inconsistency evolves in each cycle.  Once again, the influence of uncertainty and conflict on the measure of total inconsistency of the merged model will be made patent.
<p>
3. Another contribution consists of introducing two partial orderings.  The first one is useful to compare different merged models and is based on the measure of the total inconsistency. This inconsistency-based ordering allows us to measure the degree of evolution of the merged view at each step of the development process. The second one is a closeness relation based on differences of behavior which permits us to compare different perspectives and see which of them is closer, for instance, to the majority thinking, and therefore, less inconsistent with the stakeholders' global opinion.
<p>
4. Our methodology also provides a multi-valued model-checker which allows us to reason and check the satisfaction of desired properties over incomplete and inconsistent models. Finally, by analyzing the output of the model-checker together with the measures of the impact of the inconsistencies, the methodology gives feedback to the users providing revisions to be made over the original perspectives in order to obtain the satisfaction of properties by the merged model or to solve the more serious inconsistencies.
<p>
5. The last contribution of this thesis allows us to take the relative importance of the different perspectives into account. MultiSpec allows us to prioritize sources depending on the kind of stakeholders who are specifying it and the number of stakeholders developing each perspective. On the other hand, our approach considers both intensional character of information quality (called density) and the extensional character (called coverage). Moreover we combine the two criteria to an overall completeness criterion that formalizes the intuitive notion of completeness of perspectives. The proposed prioritization scheme presents several advantages, allowing us to assess the importance and quality of both individual perspectives and merged models in a natural and intuitive way.
<p>
The output of the process will be a consistent specification satisfying as much as possible the stakeholders' requirements as well as the global properties of the system.

</div>
</body>
</html>
