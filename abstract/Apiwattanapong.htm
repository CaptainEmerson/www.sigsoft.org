<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
Throughout its lifetime, software must be changed for many
reasons, such as bug fixing, performance tuning, and code
restructuring. Testing modified software is the main activity
performed to gain confidence that changes behave as they are
intended and do not have adverse effects on the rest of the
software.  A fundamental problem of testing evolving software
is determining whether test suites adequately exercise changes
and, if not, providing suitable guidance for generating new
test inputs that target the modified behavior.  Existing
techniques evaluate the adequacy of test suites based only
on control- and data-flow testing criteria. They do not
consider the effects of changes on program states and,
thus, are not sufficiently strict to guarantee that the
modified behavior is exercised.  Also, because of the lack of
this guarantee, these techniques can provide only limited
guidance for generating new test inputs.
<p>
This research has developed techniques that will assist testers in
testing evolving software and provide confidence in the quality
of modified versions.  In particular, this research has developed
a technique to identify testing requirements that ensure that
the test cases satisfying them will result in different program
states at preselected parts of the software.  This research has
also developed supporting techniques for identifying testing
requirements. Such techniques include (1) a differencing
technique, which computes differences and correspondences between
two software versions and (2) two dynamic-impact-analysis
techniques, which identify parts of software that are likely
affected by changes with respect to a set of executions.
</div>
</body>
</html>
