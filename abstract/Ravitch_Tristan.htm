<p>Programs written in more than one programming language are polyglot programs. As high-level programming languages are adopted more widely, polyglot programs become more common because they must call code written in lower-level languages to interact with existing systems. Manually calling low level code is tedious and error prone, in part due to semantic mismatches between the languages in a polyglot program. Tools exist to automatically generate library bindings (sets of wrapper functions that call low level code). However, existing tools require extensive manual annotations provided by a programmer to yield useful results. We use static analysis of C library source code to significantly reduce this manual annotation burden.</p>
 
<p>Our work infers descriptions of the interfaces that library developers intended to provide for callers, but were unable to document due to limitations of the C type system. We infer descriptions covering three important aspects of library interfaces: (1) numeric error codes returned by functions, (2) more precise types for pointer parameters that expose deeper properties about their uses, and (3) ownership semantics for objects constructed in C.</p>
 
<p>The results of these analyses can be used to generate idiomatic library bindings that make polyglot programming easier and more natural. Furthermore, the inferred interface descriptions serve as additional documentation and aid code understanding. Some of the analyses we describe are unsound and incomplete; their results are intended to be informative and helpful to someone familiar with the library being analyzed. Our evaluation shows that our results are helpful in reducing this manual annotation burden and that the unsoundness and incompleteness in our analyses are not significant problems in practice. Based on our experience, we suggest that developers can make their libraries more amenable to inclusion in polyglot programs by keeping their interfaces as abstract as possible.</p>
