<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">Correctness is the most important quality of software systems. This dissertation focuses on automated verification of concurrent software systems using
symbolic model checking. Model checking techniques exhaustively explore the state space of a system in order to determine whether it satisfies
the given temporal properties such as safety and liveness.
<P>
Use of symbolic representations (compact data structures for
efficiently encoding the state space) in model checking has enabled
the verification of systems with large (even infinite) state spaces.
<P>

In order to make symbolic model checking a viable technique for
software systems, we have designed several tools and techniques.
<P>
We have built the Composite Symbolic Library to provide a framework
for combining different, type-specific symbolic representations.
<P>
Our infinite-state symbolic model checker, the Action Language Verifier,
uses the Composite Symbolic Library to implement the model checking
algorithms. We use the Action Language to specify the behavior of concurrent
software systems.
<P>

Based on these tools, we have proposed an approach for automatic
generation of concurrency controller implementations that are correct by construction. We have applied our approach to a case study in airport ground traffic control.
<P>

We have extended our verification technique to verify invariant
properties of concurrent linked lists. Our composite framework enables
the verification of invariant properties that relate the shape of the linked list to the integer variables used in the specification.
<P>




</div>
</body>
</html>