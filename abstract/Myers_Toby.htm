<p>Marketplace demand is driving the need to develop software systems of ever increasing scale.  Managing the complexity created by this increasing scale is crucial.  Failure to adequately address the complexity that emerges with increasing scale can play havoc with even the most simple of tasks.  Mainstream software &amp; systems engineering approaches are struggling to manage the complexity of building large-scale software-intensive systems which is resulting in the widespread failure of projects.
These failures are the result of two deficiencies in mainstream approaches.  Firstly, these approaches utilise abstraction to manage complexity.  Abstraction is a temporary solution which just delays the re-emergence of complexity until the approach is applied to larger systems.  Secondly, these approaches do not provide a clear path from the requirements of a system to a final work product.  It is common instead for a miraculous leap of intuition to occur from the initial requirements to a specification, a design or a deployed system.  To ensure requirements are met, the resulting work product then must be iteratively re-evaluated against the requirements and corrected until it achieves acceptable quality.  This construct-by-correction approach results in unnecessary rework, and can be overwhelmed by the complexity of large-scale systems.</p>
 
<p>The objective of this dissertation is to address the issue of scaleability in software &amp; systems engineering by providing the foundations for a scaleable, widely applicable, end-to-end methodology.  To achieve this we have extended Behavior Engineering (BE), which is an integrated approach to systems development that supports the engineering of large-scale dependable sofware intensive systems at both the systems and software engineering level.  BE uses a bottom-up process that enables each requirement to be modeled independently and integrated one at a time to form a complete view of the system specification that is built out of the requirements.
Current research involving BE focuses primarily on using BE models as a formal specification, which can then be further analysed using techniques such as model-checking.  This dissertation extends BE by providing a new design stage developed within a model driven engineering framework.</p>
 
<p>The resulting end-to-end methodology is demonstrated using three case studies intended to show a wide cross-cutting of applications.  In the first case study, the extended BE approach is demonstrated by deploying a BE design on an embedded controller.</p>

<p>In the second case study, the BE approach is combined with Modelica, a mathematical modeling language.  Together, BE and Modelica are used to develop a new approach called Co-Modeling, which involves the development of systems composed of integrated software and hardware components.  Co-modeling is demonstrated with a case study involving the development of an automated train protection system which monitors a train driver and takes control of the train if a dangerous situation is not responded to.  The developed co-model is used to investigate co-modeling scenarios and to determine the effect that various combinations of sensors, actuators and hardware platforms have on the behavior of the integrated system.</p>
 
<p>The third case study introduces a migration approach to dealing with legacy systems which uses a BE model as an intermediary.  The approach is demonstrated using a real-world case study from industry.  The outdated circuitry is captured in a BE model using a domain-specific extension and used to generate VHDL, a hardware description language.  To demonstrate the benefit of using BE as an intermediary, the BE model is also used to perform failure mode and effects analysis, a procedure more commonly applied to BE models developed from software requirements.</p>
 
<p>Together these case studies demonstrate the potential of using a scaleable methodology to manage the complexity of designing the software-intensive systems of software &amp; systems engineering.</p>

