<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">The increasing size and performance of computer networks is generating a new
phenomenon: networks are being pervasive and ubiquitous. While
pervasive means that network connectivity is going to be a basic feature of any
computing facility, ubiquitous refers to the ability of utilizing network
connectivity independently of the physical location of the user. In this
context (usually referred to as a wide-area network), software systems are
characterized by the fact that they are loosely coupled. In general, the
loose coupling, and inherent high degree of asynchrony and heterogeneity, that
characterize applications for wide-area networks suggest event interaction
as a natural design abstraction for a growing class of
distributed systems. The event interaction main characteristic is that
components services are not invoked directly, but rather publishing one or more
events. When an event is published, the system itself is responsible to invoke
all those services that have been registered for such an event. This kind of
interaction is supported by an infrastructure called Event-Based Service
which in turn is designed by following the so called Event-Based
architectural style. The event-based architectural style can be considered at
two different, but strictly related to each other, levels of abstraction: (i)
event-based application level and (ii) event-based service level. While
event-based application level denotes the logical layer where components
interact with each other by message exchange, event-based service level denotes
the layer (underlying the former) which provides event-based oriented services
(e.g. event publication, event filtering, event delivery, etc...) to the
application level.
<P>

Purpose of this work is to investigate both layers of interest by discussing
and addressing the different research issues that raised by applying such
systems to several application domains. In particular, this work aims to place
event-based systems in a Software Engineering (SE) perspective describing how
to improve the design and development of event-based systems by exploiting
usual SE techniques: formal methods for software validation, software
architecture analysis, architectural patterns, distributed component-based
programming, Quality of Service (QoS) management, physical and logical
mobility, etc...
<P>

This thesis is conceptually divided to two different but complementary parts.
<P>
The first part concerns the design, development and analysis of a particular
instance of the event-based service, namely the publish/subscribe middleware.
<P>
Specifically, we present (i) Mobikit, a generic, value-added support
service for mobile publish/subscribe applications, and (ii) Echoes, an
event-based model which allows applications to egocentrically perceive
the context and evaluate its relevance and uncertainty with respect to their
knowledge. Moreover, from the analysis point of view, we have investigated both
functional and non-functional properties of event-based services. For
functional properties verification, we have studied how to apply model checking
techniques to publish/subscribe systems, while for non-functional properties,
we evaluated the performance, by measuring the network utilization, of a
publish/subscribe middleware in the context of wireless networks.
<P>

The second part focuses on the design, development and analysis of distributed
event-based applications. On the design side, the event-based paradigm has been
used as communication infrastructure within different applications domain:
(i) Computer Supported Collaborative Work and (ii) Product Data Management.
<P>
On the other side, much effort has been posed on verifying functional and
non-functional properties of event-based applications. In order to verify
functional properties we propose an approach, based on compositional reasoning,
that exploits the structure imposed on the system by the software architecture
in order to develop an assume-guarantee methodology to reduce properties
verification from global to local. Among non-functional properties, particular
attention has been devoted to the QoS topic. In particular it has been
implemented a system for monitoring and dynamically reconfiguring event-based
applications.
<P>




</div>
</body>
</html>