<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Michel dos Santos Soares - PhD Dissertation Abstract</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify"> 
<p>
Software-intensive systems are large, complex systems in which software is an essential component, that interacts with other software, systems, devices, actuators, sensors and with people. Being an essential component, software influences the design, construction, deployment, and evolution of the system as a whole. These systems are in widespread use and their impact on society is still increasing. Examples of software-intensive systems can be found in many sectors, such as manufacturing plants, transportation, military, telecommunication and health care.
</p>
<p>
A great challenge in modern society is to develop successful software- intensive systems respecting constraints such as costs and deadlines, and to be able to maintain and evolve these systems. This challenge is associated with another important one: developing practically useful and theoretically well-founded principles, methods, algorithms and tools for programming and engineering reliable, secure, cost-effective, and efficient software-intensive systems throughout their whole life-cycle. The proper environment in which software-intensive systems act poses great challenges. Software-intensive systems are frequently used to control critical infrastructures in which any error, non-conformance or even response delays may cause enormous financial damage and jeopardize human life.
</p>
<p>
The case studies provided in the thesis are related to Road Traffic Management Systems (RTMS). RTMS are Distributed Real-Time Systems that influence traffic by using a variety of actuators, such as traffic signals and Variable Message Signs, based on acquired data using various types of sensors, such as video cameras and inductive loops. All the difficulties of development and maintenance of software-intensive systems hold for RTMS. For example, after deployment these systems are used for many years, which means that they must be maintained in order to cope with hardware and policy changes. This makes it very unlikely that a new RTMS project will start from scratch. In most cases, legacy systems have been in operation for many years and must be taken into account. For instance, all cities have deployed urban trafficc control systems with a varying degree of sophistication, control algorithms and hardware.
</p>
<p>
Design for software-intensive systems requires adequate methodology in order to support the development of these systems. However, the theory of modeling for software-intensive systems remains incomplete, and methodologies for specifying and verifying software-intensive systems pose a grand challenge that a broad stream of research must address. In order to develop software-intensive systems, modeling tasks have to cover different development phases such as requirements analysis, architectural design, and detailed design. Other phases, such as implementation, testing and integration are direct consequences of the modeling phases. The
focus of this thesis is on the modeling phases of software development.
</p>
<p>
This thesis contributes to Software Engineering research and practice by proposing the extension and integration of formal and semi-formal modeling languages in a multiple-view software architecture, combined with domain architecture, which are used in practice to develop a family of distributed real-time systems in the road traffic domain.
</p>

</div>
</body>
</html>
