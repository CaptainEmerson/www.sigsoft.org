<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
In the vision of Ambient Intelligence, people are assisted in their
everyday activities through the proactive, opportunistic support of
non-intrusive computing devices offering intuitive interaction
modalities.  The usefulness and quality of delivered services can be
improved considerably if the devices are able to adapt their behaviour
according to sensed changes in their surrounding environment, both at
the physical and logical levels.  This interplay between
context-awareness and dynamic software adaptability is key to the
construction of applications that are smart with respect to user
needs.  Unfortunately, most current applications do not reach this
level of adaptability, due to a lack of appropriate programming
technology.  Most applications exhibit fixed functionality and seldom
do they sense their environment and adapt their services in a
context-aware fashion.  Many chances of delivering improved services
to users and network peers are thus missed.
<p>
This dissertation presents a programming model to ease the
construction of applications that can react to changes in their
execution context by adapting their behaviour dynamically.  The
starting point of our research is the development of novel language
abstractions and the adaptation of existing abstractions to render
context-aware, self-adaptable applications easier to develop.  We
demonstrate that a simple yet powerful computation model readily
provides the needed support, leading to straightforward application
code that is not concerned with context adaptation, behaviour that can
be adapted dynamically to different contexts in a non-intrusive
fashion, and context-aware applications with software architectures
that are not biased towards context adaptation ---rather, they can be
designed freely according to their domain.
<p>
The proposed computation model is realised through the Ambience
programming language, and its underlying open implementation, the
Ambient Object System.  A small-step operational semantics describes
it formally.  Much in the vein of prototype-based programming, the
model has been designed with simplicity and concreteness in mind.  It
is highly dynamic, featuring dynamic (multiple) dispatch, dynamic
inheritance, dynamic typing, and dynamic method scoping.  Application
logic adaptation is enabled by means of an intuitive, first-class
reification of context that is straightforwardly connected to dynamic
behaviour selection.  We describe needed management techniques for
such context, and a few programming guidelines on how to develop
context-aware applications using our approach.  The approach is
validated by showing its application in a number of scenarios inspired
on Ambient Intelligence.
</div>
</body>
</html>
