<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">In this dissertation we present a design for verification (DFV) approach
that embeds intentions of developers into software and
makes software systems amenable to automated verification;
hence, making the automated verification techniques scalable to large systems.
<P>
In this DFV approach, we use 1) behavioral interfaces
that isolate the behavior and enable modular verification,
2) an assume-guarantee style verification strategy
that separates verification of the behavior from
the verification of the conformance to the interface specifications,
3) a general model checking technique for interface verification,
and 4) domain specific and specialized verification
techniques for behavior verification.
<P>

We realize our DFV approach for concurrent programming
by introducing the concurrency controller pattern.
<P>
We aim to eliminate synchronization errors in concurrent Java programs.
<P>
We use the Action Language Verifier 
to verify the concurrency controller behaviors
by an automated translation from their Java implementations.
<P>
We have applied this framework to two real-life software systems:
a concurrent text editor and
a safety critical air traffic control software called TSAFE.
<P>

To demonstrate the applicability of our DFV approach
to another application domain,we introduce the peer controller pattern for
asynchronously communicating web services.
<P>
Our goal is both to analyze properties of interactions
among the participating peers and to validate the conformance of peer implementations to their behavioral specifications.
<P>
We use SPIN to verify the interaction properties.
<P>
We adapt synchronizability analysis to enable
behavior verification with respect to unbounded 
asynchronous communication queues.
<P>
We extend this approach with an hierarchical interface model
for compact representation of peer interfaces.
<P>



</div>
</body>
</html>