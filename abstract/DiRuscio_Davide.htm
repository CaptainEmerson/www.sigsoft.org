<p>Last years witnessed an increasing intricacy of both software systems and technologies. A number of platforms (e.g. CORBA, J2EE, .NET) have been introduced which often came in bundle with their own programming language (e.g. C++, Java, C#). This has made the software development process a difficult and expensive task. Model driven engineering (MDE) aims at preserving the investments in building complex software systems against constantly changing technology solutions, by advocating the raising of the abstraction level in system specification and increasing automation in system development. The concept of model driven engineering emerged as a generalization of Model Driven Architecture (MDA) proposed by the Object Management Group (OMG) in 2001. The MDA based software development starts by building a Platform Independent Model (PIM) of that system which is refined and transformed to one or more Platform Specific Models (PSMs). Then, the PSMs are transformed to code.  In this scenario, model transformation plays a central role. Many languages and tools have been proposed to specify and execute transformation programs. In 2002 the Object Management Group (OMG) issued the Query/View/Transformation (QVT) request for proposal to define a standard transformation language, whereas in the meanwhile, a number of model transformation approaches have been proposed both from academia and industry. However, since MDE approaches rely on complex model transformations, the problem of specifying them in a precise way has to be sufficiently achieved since the automation introduced by transformations gives place to additional requirements on assuring the quality of mappings; correct conceptual designs may implant bugs into the applications if the automated transformations are erroneous. Another central operation in MDE is model weaving intended as the operation for setting fine-grained relationships between models or metamodels and executing operations on them based on the semantics of the weaving associations specifically defined for the considered application domain.</p>
 
<p>This work proposes A4MT (ASMs for Model Transformation Specification) an approach based on Abstract State Machines (ASMs) to support the formal specification and execution of model transformation and weaving. The choice of ASMs is motivated by the extensive use of this formalism in the specification and analysis of many software and hardware systems. The formalism has a simple syntax that permits to write specifications that can be seen as  pseudocode over abstract data  and makes possible formal and executable specifications of model transformations enabling their design and validation. A4MT aims at formally specifying the behaviour of transformations in order to produce a formal and implementation independent reference for what can and what can not happen during their execution. In this way, the transformation designers have the possibility to check their basic design decisions against an accurate and executable high-level model of the transformation itself. A4MT has been validated in different applicative domains. Concerning the specification of model transformations, it has been used mainly to support the model driven development of Web applications and the compositional verification of middleware-based systems. With respect to model weaving, A4MT has been used to formally specify the semantics of weaving operators and the approach has been validated in two kind of applications: decoupling of concerns in model driven development of Web applications and for software architecture modeling.</p>
