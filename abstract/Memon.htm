<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">The widespread recognition of the usefulness of graphical user interfaces(GUIs) has established their importance as critical components of today's software.  Although the use of GUIs continues to grow, GUI testing has remained a neglected research area. Since GUIs have characteristics that are different from those of conventional software, such as user events for input and graphical output, techniques developed to test conventional software cannot be directly applied to test GUIs.  This thesis develops a unified solution to the GUI testing problem with the particular goals of automation and integration of tools and techniques used in various phases of GUI testing. These goals are accomplished by developing a GUI testing framework with a GUI model as its central component. For efficiency and scalability, a GUI is represented as a hierarchy of components, each used as a basic unit of testing. The framework also includes a test coverage evaluator, test case generator, test orac!
 le, test executor, and regression tester.  The test coverage evaluator employs hierarchical, event-based coverage criteria to automatically specify what to test in a GUI and to determine whether the test suite has adequately tested the GUI. The test case generator employs plan generation techniques from artificial intelligence to automatically generate a test suite.  A test executor automatically executes all the test cases on the GUI. As test cases are being executed, a test oracle automatically determines the correctness of the GUI. The test oracle employs a model of the expected state of the GUI in terms of its constituent objects and their properties.  After changes are made to a GUI, a regression tester partitions the original GUI testsuite into valid test cases that represent correct input/output for the modified GUI and invalid test cases that no longer represent correct input/output.  The regression tester employs a new technique to reuse some of the invalid test ca!
 ses by repairing them.  A cursory exploration of extending the!
  framewo
rk to handle the new testing requirements of web-user interfaces (WUIs) is also done. The framework has been implemented and experiments have demonstrated that the developed techniques are both practical and useful.
<P>



</div>
</body>
</html>