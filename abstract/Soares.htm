<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
This thesis defines an Aspect-Oriented Implementation Method that defines data management, communication, and concurrency control concerns (requirements) as aspects. An aspect is a new abstraction mechanism, added by this new paradigm extending the object-oriented paradigm, aiming to increase software modularity, and therefore, software maintainability. The modularity reached by using aspects allows programmers to add or change software functionality with non-invasive changes, which keeps the base code clean and easy to understand and evolve. Furthermore, this avoids code of a specific concern to be tangled with other concerns and spread through several modules. We also define how the implementation method can be composed with the RUP development process, in order to tailor management, requirements, analysis, and design activities to support the method. Moreover, the method presents an alternative implementation approach that tries to anticipate requirement changes!
 by yielding a functional prototype earlier than in a regular approach. This allows customers and developers to test the software before additional effort to implement non-functional requirements. A study was performed to characterize how useful this alternative implementation approach is, providing a support to decision-making when using the alternative or a regular approach. In addition, the method provides tool support to generate types of the base software and aspects to implement data management, communication, and concurrency control concerns. In fact, this tool guides the method application and the use of an aspectframework provided by the method, which allows reusing base aspects for implementing those concerns. The method is tailored to a specific software architecture that despite being specific can be used to implement several kinds of software.
</div>
</body>
</html>