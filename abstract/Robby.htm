<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
Model checking is a technique for systematically searching the possible behaviors of a system for certain kinds of errors. Model checking has been successfully used to analyze hardware, and it has matured to a point where companies, such as Intel, have used it in their processor development process. There have been a number of significant efforts to use model checking for analyzing behavioral properties of software, and they have achieved varying degrees of success. Despite the progressive advances of software model checking in the past few years, three main obstacles still hinder its adoption: (1) the system modeling problem -- the gap between the system description and the input language of a model checker, (2) the property specification problem -- the difficulty of expressing properties of modern software, and (3) the state-space explosion problem -- the exponential growth of the state-space of systems as the software complexity increases.
<p>
In order to address these obstacles, a model checker should leverage domain-specific abstractions and domain-specific properties of the systems being checked to reduce the cost of model checking. To explore this thesis, we developed Bogor -- a flexible and extensible software model checking framework that provides effective support for addressing the three obstacles mentioned above. The capabilities of Bogor are illustrated by showing how it enables more effective model checking of concurrent object-oriented Java programs and event-driven component-based designs of Boeing's avionics software. That is, Bogor's rich and extensible modeling language addresses the system modeling problem and the property specification problem. To address the state-space explosion problem, we customize the Bogor framework by leveraging knowledge and abstractions of the specific systems being checked.  These customizations give orders of magnitude reduction in terms of space and time over existing techniques for both model checking Java programs and designs of avionics systems.
</div>
</body>
</html>