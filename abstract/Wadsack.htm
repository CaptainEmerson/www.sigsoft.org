<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">Today, information system evolution primarily consists of extending the legacy systems and migrate them to modern platforms related to the Web and mobile devices. This dissertation tackles the problem of understanding and adapting legacy web information systems based on the systems’ data. In this context several methods and tools have been proposed for reengineering. Since legacy systems have grown over years and lack sufficient documentation, reengineering is a complex and hard task. Tool supported reengineering approaches and processes reduce the complexity and risks during web information system maintenance. Still, current reengineering approaches and tools often tackle only specific system parts or dedicated maintenance aspects. This thesis aims to overcome these limitations by providing a process that combines tools for reengineering the data as well as the applications. Our focus is to handle uncertain knowledge by sustaining human exploration and iteration during a !
tool supported reengineering process. In practice uncertain knowledge during reengineering plays a fundamental role but it is often neglected by exiting approaches due to idealistic assumptions.
<P>

The presented data-oriented reengineering process provides concepts that combine existing data and application design reengineering approaches to maintain web information systems. Since it is unrealistic to presume that reengineering can follow a strictly waterfall like process without iterations, inconsistencies occur during the reengineering process. The chosen combined approaches fulfil the requirement to deal with such inconsistencies. We based our process on models because models provide the possibility to represent (inconsistent) knowledge at different levels of abstraction. Moreover, models can be accurate enough to enable code generation. In this dissertation, we base the system’s models on graphs. We employ graph transformation theory to provide mechanisms that detect, handle and resolve inconsistencies of the models automatically. The results are implemented within the REDDMOM project. We use the FUJABA TOOL SUITE for tool integration and evaluate our concepts wi!
th a case study in the Health Care domain.
<P>



</div>
</body>
</html>