<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
Information processing is the key issue of the 20th Century. Databases are designed to store information and the World Wide Web has turned out to be the place for the gathering and distribution of information. Some scientists even consider the Web itself to be a huge world-wide distributed database. While these two seem to be made for each other, there are inherent difficulties in linking them together due to almost 35 years of separate development resulting in quite different technologies. Nevertheless, good Web sites are database backed Web sites - it turned out that most real-life Web applications need an underlying database to be stable, flexible and scalable. Appropriate design methodologies are hence needed to implement complex functionality. Moreover, there are already many databases and legacy systems in existence which people want to connect to the Web with similar functionality as in classic implementations. Most of them rely on the proven technology of relational !
databases or on their object relational successors.
<p>
Consequently the main aim of this thesis is the integration of databases and the Web. Based on a short explanation of the differences between databases and the Web, a new design methodology is presented. The finite state machine model well known from static hypertext documents is remodelled to be suitable for dynamically generated hypertext. Groups of links are mainly used instead of forms to interact with the database. The key idea is to use an object-based client-server model to design the user interface layout, the middleware functionality and the database transactions in a homogenous way. Thereafter, the  actual implementation of such a system is composed of several parts with potentially different techniques. For example, either a pure HTML interface with full functionality on the server side or a Java applet with greater functionality on the client side. A toolset has been implemented to automatically generate the different applications from a design language. The tool!
set itself is a Web application fostering unlimited Web collaboration. Using this technique, complete information systems can be built, including logical page flow and bidirectional crosslinks, multi lingual support and frames with different window modes. The design methodology further guarantees stable and robust applications with sophisticated user interactions, compatibility with almost any browser and flexible layout design separated from the application functionality.
<p>
The usability of Java is compared with the pure HTML approach, investigating different client-server tradeoffs and persistence frameworks. Object oriented design and implementation has some drawbacks with typical Web-based information systems. It is, however, shown how Java can supplement the HTML approach but not supplant it.
<p>
In addition to the differences in design and implementation, relational databases and the Web also differ considerably in the ways they can be searched. Universal relations and natural language interfaces known from database theory are combined with keyword searches known from the Web to define a metadata model for searching a database backed Web application. The key idea here is the separation of structural and contextual meaning of words. Based on this idea, generic interfaces for both Intelligent Software Agents and robots from search engines have been implemented.
<p>
Evaluation of the proposed methods has been carried out with two real-life applications implemented successfully with both pure HTML and Java. A quantitative analysis of these applications helps to decide between pure HTML and Java: For less than 200-300 user interactions pure HTML typically outperforms Java in terms of network traffic. A qualitative analysis of these two applications resulted in the first users' feedback being encouragingly positive. The techniques described in this thesis will help to continue to produce such positive results and to make the design of database backed Web applications faster, easier and less prone to error.

</div>
</body>
</html>
