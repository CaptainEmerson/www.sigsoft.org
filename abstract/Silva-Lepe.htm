<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">In order to design and develop object-oriented programs, one must experience what is known as a "paradigm shift". This shift requires that one do not think in terms of the procedures that a software system must perform, but rather in terms of the entities or objects that participate in the system. As programmers experience a paradigm shift, so must existing software systems somehow be transformed into objectorientation if they are to benefit from object-oriented features.
<P>
As reusable and maintainable as object-oriented programs can be, there is still room for improvement. In particular, object-oriented programming introduces maintainability issues that were not present in the world of procedural programs. Thus, while we are transforming procedural programs in order to improve their reusability and maintainability, we should make sure that adaptiveness is not compromised.
<P>
In this dissertation we address the problem of providing an infrastructure to help re-engineer procedural programs into an adaptive object-oriented style. We provide algorithms for:
* Abstracting class structures from object examples.
<P>
* Transforming procedural programs, eliminating undesirable features, into an
  object-oriented style.
<P>
* Finding chains of relationships in an object-oriented program.
<P>
The algorithms presented in this thesis form a suite of techniques that a maintainer can turn to when looking for alternatives to bringing procedural programs into an object-oriented style.
<P>



</div>
</body>
</html>