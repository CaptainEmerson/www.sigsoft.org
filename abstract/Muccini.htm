<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">This Ph.D. thesis describes the role of Software Architecture for testing, coordination and model-checking.
<P>

The first part provides background and state-of-the art description of Software Architecture, Software Testing, Coordination models and Languages, and Software Model Checking.
<P>

Then, our proposals for applying software testing, coordination and model-checking techniques at the software architecture-level are defined.
<P>

Software Architecture-based Testing: Software Architectures have recently been considered, both by academia and software industries, as a means to improve the dependability of large complex software products, while reducing development times and costs. Our research work has been addressing the problem of identifying suitable functional test classes for the testing in-the-large of complex real-world systems. Our goal is to provide a test manager with a systematic method to extract suitable test classes for the higher levels of testing. The approach presented here takes into account both dimensions of the testing problem: test selection (over an architectural specification) and test execution (on the implemented system).
<P>

Software Architecture and Coordination: In recent years, the growing of system complexity and the need to manage highly complex concurrency between different processes has represented an important issue in different fields of research.
<P>
Coordination models have been introduced with the goal of finding solutions to the problem of managing the interaction among concurrent programs or activities.
<P>
Coordination models and SA descriptions work in different domains, but their focus is similar since they both specialize to describe process interaction, abstracting away the details of computation and focusing on the interactions.
<P>
This thesis work proposes a way to profitably and coherently relate these
two system development phases, in order to elicit, describe, analyze and validate system coordination properties that might be then specified with a suitable coordination language.
<P>

Software Architecture and Model-Checking: Software Architecture specifications are indeed a powerful mean to handle increasingly complex software, with shorter time-to-market and better quality. However, architectural models can become too complex to be described and managed. To tackle system complexity several viewpoints have been introduced to specify the system from multiple different perspectives. Although very expressive, this approach has two drawbacks with respect to analysis and validation: the first one deals with system specification "model incompleteness", while the latter is a problem of "view consistency". The approach we present in the thesis addresses the two above
problems. We propose a framework in which it is possible to obtain and successively validate an SA complete model starting from incomplete and possibly inconsistent specifications.
<P>

The solutions proposed in the thesis have been applied to some case studies.
<P>




</div>
</body>
</html>