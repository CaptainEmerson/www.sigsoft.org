<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
To improve the quality of their products, software organizations often
apply quality improvement activities like refactoring between
development iterations. In the refactoring phase systems are reworked
at problematic locations to improve the system s quality. But the
effort for the manual detection of where to apply individual
refactorings result in either very short or costly refactoring phases
if it is done at all.  This thesis addresses the problem of diagnosing
and handling quality defects (i.e., opportunities for refactoring such
as antipatterns, smells, flaws, pitfalls, anomalies, illnesses, etc.)
in object-oriented source code following the guiding picture of
medicine. It focuses on the techniques for the context-sensitive
diagnosis of quality defects and their iterative, semi-automatic, and
quality-oriented handling during development.  The main contribution
of this research is a comprehensive method for the context-sensitive
diagnosis and continuous handling of quality defects during
development, which consists of four main elements. First, a formal
morphological model in form of an ontology (SQuaD), that helps to
understand the fundamental concepts behind quality defects and the
information available for their diagnosis. It describes their
structure, symptoms, affected qualities, and associated refactorings
as well as their interrelations and dependencies. Second, a
context-sensitive quality defect handling method (SQuaH) for
quality-oriented quality defect diagnosis and handling that inherently
supports the recurring handling and refactoring of quality
defects. Third, an extensible reference architecture (SQuaRE) for
in-situ quality defect diagnosis systems, which was realized in two
systems for source code (DoctorQ) and software models (VIDE-DD).
Fourth, a quality defect annotation language (SQuaAL) to handle
quality defects in the software and enrich it with information.  All
these contributions have been successfully applied and their
effectivity and efficiency is supported with empirical evidence from
several studies as well as experiments. The empirical data indicates
that the approach is accepted and useful to software engineers, has a
positive effect on the perceived quality of a software system, and
increases the performance during quality defect diagnosis and
handling.  </div> </body> </html>
