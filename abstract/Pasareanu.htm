<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">Modern software systems, which are often concurrent and distributed must be extremely reliable. Finite state verification (FSV) techniques, such as model checking, are emerging as the front-runner in the race to automate high quality assurance of software. This thesis will address several of the challenges of building finite state models of software systems, that are amenable to verification using FSV tools.
<P>

First, the existence of very large or infinite data in software makes FSV of software difficult. We consider one method for avoiding this problem: tool support for source-to-source data abstractions that are used to reduce the data domains of a program to small finite domains.
<P>

Second, most FSV tools are aimed at reasoning about complete systems, but modern software is increasingly built as a collection of independently produced components which are assembled to achieve a system's requirements. We will describe an automatic technique for building finite state models of software components. The technique enables modular reasoning about components, taking into account assumptions about the behavior of the environment in which the components will execute.
<P>

We will demonstrate our techniques on several case studies, written in Ada and Java.
<P>



</div>
</body>
</html>