<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">Aspect is a static analysis technique based on formal specification. By trading expressive power for tractability, Aspect can offer efficient detection of a class of bugs that is not detectable by other static means. Since the specifications are partial, not all bugs can be caught. But there are never any spurious reports: an error message always indicates an error in the code or a flaw in the specification.
<P>

Aspect can handle most of the features of modern imperative programming languages: side-effects and aliasing, exceptions, polymorphism and dynamic allocation. It takes advantage of strong typing and is designed for programs that are organized around procedures and abstract data types.
<P>

The checking mechanism is based on an enriched form of dependency analysis. Objects are divided into projections called 'aspects'; the dependencies of different aspects are then tracked individually. The analysis is comparable in complexity to the kinds of analysis already performed by optimizing compilers.
<P>

A prototype checker has been implemented for the CLU programming language. It runs almost as fast as the compiler, and has found a variety of bugs in real programs.
<P>

[see also: Daniel Jackson. Aspect: Detecting Bugs with Abstract Dependences. ACM Transactions on 
Software Engineering and Methodology, Vol. 4, No. 2, April 1995, pp. 109--145.]




</div>
</body>
</html>