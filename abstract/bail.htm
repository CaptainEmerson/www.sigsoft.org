<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
This Dissertation develops three language-independent representations for programs, and, for each representation, defines a measure of program structure.  These representations are based on a finite-state model and highlight both control and data flow patterns within the software.  Each measure is defined to be the size of the program model, in bits, resulting from coding the program on the finite-state computer.
<p>
We assume that structural complexity is strongly influenced by the number of, and relationships between, recurring patterns within the software, and that the complexity of the software can be measured by identifying these patterns.  To verify our hypothesis, a computational model is deeloped, based on existing theoretical models, that highlighs the structural characteristics of the modeled program. This model is called a Hierarchical Abstract Computer and is finite-state in order to represent the real machines on which the programs are executed, and to characterize the actual behavior of these programs as they are executed.  By emphasizing structural features, this model reveals those characteristics of programs that coincide with our view of organizational complexity.  Based on the model, several qualitative program metrics are defined that reveal the degree of internal organization within the system, and that quantize those features that deeply affect overall program complexity.  The metrics are validated by analyzing their behavior when presented
with certain program constructs that are known to contribute to complexity,
and also by comparing their performance against existing measures.
</div>
</body>
</html>
