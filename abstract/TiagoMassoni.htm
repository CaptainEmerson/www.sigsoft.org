<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">
Refactoring object-oriented software, as any other evolutionary task, usually affects source code and object models, burdening developers to keep those artifacts correct and up to date. Due to the gap between modeling and programming artifacts, refactoring efforts soon become duplicate and considerably expensive. In this context, currently used tool support, in special Round-Trip Engineering (RTE) tools, fails to fully automate evolution tasks. Consequently, most projects discard object models early in the life cycle, adhering to code-driven approaches. This thesis proposes a formal approach to consistently refactor object models and object-oriented programs of a system in a model-driven manner. Model refactoring is backed by formal laws of modeling, which are guaranteed to be semantics preserving. Each refactoring, a composition of laws, applicable to an object model, is associated with a semi-automatic sequence of applications of laws of programming, called strategy. Strategies are applied by relying on a specific conformance relationship between object models and programs, which must fulfill a specific degree of confinement. We formalized 14 strategies, two for each law of modeling that affects program structures. These strategies have been formalized as refinement tactics. In such scenario, complex refactorings that affect main program structures can be applied abstractly, leaving the update of implementation details to strategies. Also, model invariants can be used to improve refactoring automation, as they provide runtime information that allows automation of more powerful program refactorings. This thesis considers Alloy as the formal modeling language, along with a simplified Java-like programming language that we call BN. For this programming language, we introduced four new refactorings and laws of object-oriented programming, with their correspondent derivations and proofs. Also, the laws of programming have been used in a reference semantics context, which is closer to current mainstream programming languages. In order to delimitate the applicability of model-driven refactorings, we formalize a specific conformance relationship, using a underlying general framework for formalizing conformance relationships; the related formal definitions have been specified and type-checked with PVS. In addition, we establish and manually prove a soundness theorem for strategies, guaranteeing that they preserve the target program's behavior and conformance. Despite of its formality, we also regard the utilization of this theory in practical object-oriented development, by discussion and three case studies that simulate refactoring situations for object models and programs. The results presented here shows evidence on issues that will surely recur in other Model-Driven Development contexts.
</div>
</body>
</html>