<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<div align="justify">Evolving a software implementation requires that the developer has a good understanding
of what the system does. In practice however a lot of domain knowledge
about the software that was available when the system was first conceived is only
available to the current developer in an implicit form. Furthermore, even when
the domain knowledge is available in an explicit form, the developer also needs
to know to which part of the implementation the knowledge applies to. Unfortunately
this knowledge is often detached from the implementation which forces
the developer to re-establish the link retroactively. Moreover, as a result of short
term development economics, developers will often neglect to document and couple
the domain knowledge about a system in favor of writing code. This results
in a passive source of documentation that will quickly become out-of-date. This
dissertation presents a concept-centric environment which is based upon a symbiotic
integration of the programming environment (code level) and the domain
knowledge environment (concept level). It allows a developer to capture domain
knowledge in an explicit form, which is coupled to the corresponding implementation.
<P>
Moreover it enables the active participation of the domain knowledge in
providing the functionality of the software. This installs a bi-directional interaction
between the concept level and the code level which can be used to create a
documented and malleable implementation of a software system



</div>
</body>
</html>